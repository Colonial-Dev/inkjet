/// The names recognized by `tree-sitter` when querying the parse tree during highlighting.
/// 
/// Sourced from the [`nvim-treesitter`](https://github.com/nvim-treesitter/nvim-treesitter/blob/master/CONTRIBUTING.md) project.
pub const HIGHLIGHT_NAMES: &[&str] = &[
    // Locals - Basic
    "local.scope",
    "local.definition",
    "local.reference",
    // Locals - Neovim
    "definition",
    "definition.constant",
    "definition.function",
    "definition.method",
    "definition.var",
    "definition.parameter",
    "definition.macro",
    "definition.type",
    "definition.field",
    "definition.enum",
    "definition.namespace",
    "definition.import",
    "definition.associated",
    "scope",
    "reference",
    // Tags
    "tag",
    "tag.attribute",
    "tag.delimiter",
    // Text
    "text",
    "text.strong",
    "text.emphasis",
    "text.underline",
    "text.strike",
    "text.title",
    "text.quote",
    "text.uri",
    "text.math",
    "text.environment",
    "text.environment.name",
    "text.reference",
    "text.literal",
    "text.literal.block",
    "text.todo",
    "text.note",
    "text.warning",
    "text.danger",
    "text.diff.add",
    "text.diff.delete",
    // Identifiers
    "variable",
    "variable.builtin",
    "constant",
    "constant.builtin",
    "constant.macro",
    "namespace",
    "symbol",
    // Types
    "type",
    "type.builtin",
    "type.definition",
    "type.qualifier",
    "storageclass",
    "attribute",
    "field",
    "property",
    // Keywords
    "keyword",
    "keyword.coroutine",
    "keyword.function",
    "keyword.operator",
    "keyword.return",
    "conditional",
    "conditional.ternary",
    "repeat",
    "debug",
    "label",
    "include",
    "exception",
    // Functions
    "function",
    "function.builtin",
    "function.call",
    "function.macro",
    "method",
    "method.call",
    "constructor",
    "parameter",
    // Literals
    "string",
    "string.documentation",
    "string.regex",
    "string.escape",
    "string.special",
    "character",
    "character.special",
    "boolean",
    "number",
    "float",
    // Punctuation
    "punctuation.delimiter",
    "punctuation.bracket",
    "punctuation.special",
    // Miscellaneous
    "comment",
    "comment.documentation",
    "error",
    "none",
    "preproc",
    "define",
    "operator",
];

/// The same as [`HIGHLIGHT_NAMES`], but with all dots replaced with `_`.
pub const HIGHLIGHT_CLASS_NAMES: &[&str] = &[
    "local_scope",
    "local_definition",
    "local_reference",
    "definition",
    "definition_constant",
    "definition_function",
    "definition_method",
    "definition_var",
    "definition_parameter",
    "definition_macro",
    "definition_type",
    "definition_field",
    "definition_enum",
    "definition_namespace",
    "definition_import",
    "definition_associated",
    "scope",
    "reference",
    "tag",
    "tag_attribute",
    "tag_delimiter",
    "text",
    "text_strong",
    "text_emphasis",
    "text_underline",
    "text_strike",
    "text_title",
    "text_quote",
    "text_uri",
    "text_math",
    "text_environment",
    "text_environment_name",
    "text_reference",
    "text_literal",
    "text_literal_block",
    "text_todo",
    "text_note",
    "text_warning",
    "text_danger",
    "text_diff_add",
    "text_diff_delete",
    "variable",
    "variable_builtin",
    "constant",
    "constant_builtin",
    "constant_macro",
    "namespace",
    "symbol",
    "type",
    "type_builtin",
    "type_definition",
    "type_qualifier",
    "storageclass",
    "attribute",
    "field",
    "property",
    "keyword",
    "keyword_coroutine",
    "keyword_function",
    "keyword_operator",
    "keyword_return",
    "conditional",
    "conditional_ternary",
    "repeat",
    "debug",
    "label",
    "include",
    "exception",
    "function",
    "function_builtin",
    "function_call",
    "function_macro",
    "method",
    "method_call",
    "constructor",
    "parameter",
    "string",
    "string_documentation",
    "string_regex",
    "string_escape",
    "string_special",
    "character",
    "character_special",
    "boolean",
    "number",
    "float",
    "punctuation_delimiter",
    "punctuation_bracket",
    "punctuation_special",
    "comment",
    "comment_documentation",
    "error",
    "none",
    "preproc",
    "define",
    "operator",
];