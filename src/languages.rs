#![allow(dead_code)]
#![allow(clippy::items_after_test_module)]
// This module is automatically generated by Inkjet.

pub mod asm {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_asm() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_asm() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_asm() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod bash {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_bash() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_bash() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/bash/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_bash() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod c {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_c() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_c() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/c/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_c() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod c_sharp {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_c_sharp() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_c_sharp() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/c-sharp/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_c_sharp() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod cpp {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_cpp() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_cpp() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/cpp/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/cpp/queries/injections.scm");
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_cpp() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod css {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_css() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_css() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/css/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_css() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod go {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_go() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_go() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/go/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_go() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod haskell {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_haskell() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_haskell() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/haskell/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = include_str!("../languages/haskell/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_haskell() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod html {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_html() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_html() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/html/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/html/queries/injections.scm");
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_html() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod java {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_java() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_java() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/java/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_java() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod javascript {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_javascript() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_javascript() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/javascript/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/javascript/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/javascript/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_javascript() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod json {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_json() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_json() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/json/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_json() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod julia {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_julia() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_julia() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_julia() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod kotlin {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_kotlin() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_kotlin() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/kotlin/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_kotlin() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod lua {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_lua() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_lua() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_lua() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod ocaml {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_ocaml() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_ocaml() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/ocaml/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = include_str!("../languages/ocaml/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_ocaml() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod ocaml_interface {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_ocaml_interface() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_ocaml_interface() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/ocaml_interface/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = include_str!("../languages/ocaml_interface/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_ocaml_interface() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod php {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_php() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_php() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/php/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/php/queries/injections.scm");
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_php() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod python {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_python() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_python() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/python/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_python() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod regex {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_regex() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_regex() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/regex/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_regex() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod ruby {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_ruby() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_ruby() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/ruby/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = include_str!("../languages/ruby/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_ruby() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod rust {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_rust() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_rust() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/rust/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/rust/queries/injections.scm");
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_rust() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod scala {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_scala() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_scala() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_scala() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod sql {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_sql() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_sql() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/sql/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_sql() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod toml {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_toml() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_toml() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/toml/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_toml() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod typescript {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_typescript() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_typescript() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/typescript/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = include_str!("../languages/typescript/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_typescript() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub static LANG_MAP: phf::Map<&'static str, fn() -> tree_sitter_highlight::HighlightConfiguration> = 
::phf::Map {
    key: 12913932095322966823,
    disps: &[
        (4, 5),
        (1, 0),
        (11, 3),
        (2, 23),
        (1, 24),
        (0, 35),
        (2, 3),
        (19, 2),
        (2, 14),
        (0, 2),
    ],
    entries: &[
        ("asm", asm::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("kt", kotlin::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("go", go::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("toml", toml::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("cs", c_sharp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("java", java::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("htm", html::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("sql", sql::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("json", json::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("jl", julia::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("regex", regex::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("hpp", cpp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("ml", ocaml::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("csharp", c_sharp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("mli", ocaml_interface::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("h++", cpp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("rust", rust::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("typescript", typescript::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("ocaml_interface", ocaml_interface::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("kotlin", kotlin::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("c", c::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("ocaml", ocaml::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("c#", c_sharp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("golang", go::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("c++", cpp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("julia", julia::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("rb", ruby::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("bash", bash::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("rs", rust::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("hs", haskell::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("cc", cpp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("css", css::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("kts", kotlin::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("py", python::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("php", php::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("ruby", ruby::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("c-sharp", c_sharp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("lua", lua::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("haskell", haskell::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("javascript", javascript::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("hh", cpp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("js", javascript::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("cpp", cpp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("html", html::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("scala", scala::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("python", python::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
    ],
};
