#![allow(dead_code)]
#![allow(clippy::items_after_test_module)]
// This module is automatically generated by Inkjet.

pub mod ada {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_ada() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_ada() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_ada() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod x86asm {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_x86asm() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_x86asm() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_x86asm() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod bash {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_bash() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_bash() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_bash() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod bibtex {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_bibtex() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_bibtex() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_bibtex() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod blueprint {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_blueprint() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_blueprint() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_blueprint() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod c {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_c() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_c() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_c() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod capnp {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_capnp() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_capnp() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_capnp() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod clojure {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_clojure() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_clojure() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_clojure() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod cmake {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_cmake() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_cmake() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_cmake() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod c_sharp {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_c_sharp() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_c_sharp() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_c_sharp() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod commonlisp {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_commonlisp() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_commonlisp() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_commonlisp() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod cpp {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_cpp() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_cpp() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_cpp() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod css {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_css() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_css() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_css() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod cue {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_cue() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_cue() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_cue() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod dart {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_dart() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_dart() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_dart() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod diff {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_diff() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_diff() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_diff() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod dockerfile {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_dockerfile() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_dockerfile() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_dockerfile() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod elisp {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_elisp() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_elisp() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_elisp() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod elixir {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_elixir() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_elixir() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_elixir() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod elm {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_elm() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_elm() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_elm() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod erlang {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_erlang() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_erlang() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_erlang() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod fortran {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_fortran() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_fortran() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_fortran() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod go {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_go() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_go() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_go() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod gdscript {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_gdscript() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_gdscript() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_gdscript() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod glsl {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_glsl() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_glsl() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_glsl() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod haskell {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_haskell() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_haskell() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_haskell() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod html {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_html() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_html() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_html() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod java {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_java() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_java() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_java() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod javascript {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_javascript() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_javascript() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_javascript() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod json {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_json() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_json() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_json() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod julia {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_julia() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_julia() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_julia() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod kotlin {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_kotlin() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_kotlin() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_kotlin() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod latex {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_latex() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_latex() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_latex() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod lua {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_lua() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_lua() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_lua() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod make {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_make() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_make() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_make() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod matlab {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_matlab() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_matlab() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_matlab() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod meson {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_meson() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_meson() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_meson() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod nim {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_nim() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_nim() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_nim() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod nix {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_nix() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_nix() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_nix() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod objc {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_objc() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_objc() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_objc() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod ocaml {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_ocaml() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_ocaml() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_ocaml() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod ocaml_interface {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_ocaml_interface() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_ocaml_interface() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_ocaml_interface() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod openscad {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_openscad() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_openscad() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_openscad() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod pascal {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_pascal() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_pascal() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_pascal() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod perl {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_perl() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_perl() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_perl() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod php {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_php() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_php() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_php() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod python {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_python() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_python() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_python() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod r {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_r() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_r() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_r() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod regex {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_regex() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_regex() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_regex() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod ruby {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_ruby() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_ruby() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_ruby() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod rust {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_rust() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_rust() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_rust() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod scala {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_scala() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_scala() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_scala() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod scheme {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_scheme() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_scheme() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_scheme() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod scss {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_scss() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_scss() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_scss() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod sql {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_sql() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_sql() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_sql() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod toml {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_toml() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_toml() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_toml() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod typescript {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_typescript() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_typescript() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_typescript() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod yaml {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_yaml() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_yaml() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_yaml() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod wgsl {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_wgsl() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_wgsl() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_wgsl() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod zig {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_zig() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_zig() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_zig() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub static LANG_MAP: phf::Map<&'static str, fn() -> tree_sitter_highlight::HighlightConfiguration> = 
::phf::Map {
    key: 7485420634051515786,
    disps: &[
        (55, 24),
        (1, 7),
        (0, 22),
        (1, 56),
        (0, 30),
        (0, 44),
        (8, 25),
        (1, 21),
        (77, 46),
        (0, 1),
        (10, 58),
        (0, 4),
        (0, 11),
        (0, 0),
        (0, 39),
        (1, 0),
        (5, 70),
        (0, 90),
        (16, 3),
        (28, 93),
        (23, 96),
        (3, 35),
    ],
    entries: &[
        ("makefile", make::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("pl", perl::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("objective-c, objectivec, obj-c", objc::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("hh", cpp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("c_sharp", c_sharp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("julia", julia::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("ml", ocaml::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("mk", make::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("cljc", clojure::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("py", python::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("erlang", erlang::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("pascal", pascal::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("leex", elixir::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("hs", haskell::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("ex", elixir::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("scheme", scheme::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("exs", elixir::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("bib", bibtex::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("scss", scss::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("r", r::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("js", javascript::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("go", go::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("elm", elm::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("cpp", cpp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("ruby", ruby::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("gdscript", gdscript::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("zig", zig::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("cs", c_sharp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("erl", erlang::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("clojure", clojure::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("ocaml", ocaml::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("rb", ruby::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("el, emacs-lisp", elisp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("rust", rust::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("regex", regex::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("c#", c_sharp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("perl", perl::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("bash", bash::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("openscad", openscad::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("html", html::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("capnp", capnp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("bibtex", bibtex::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("toml", toml::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("csharp", c_sharp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("diff", diff::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("c", c::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("blueprint", blueprint::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("ocaml_interface", ocaml_interface::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("php", php::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("clj", clojure::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("typescript", typescript::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("kotlin", kotlin::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("tex", latex::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("rs", rust::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("c++", cpp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("golang", go::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("json", json::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("ss", scheme::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("fortran", fortran::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("kt", kotlin::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("h++", cpp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("haskell", haskell::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("javascript", javascript::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("objc", objc::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("nix", nix::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("scala", scala::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("mli", ocaml_interface::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("cmake", cmake::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("m", matlab::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("ada", ada::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("lisp", commonlisp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("scad", openscad::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("cc", cpp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("python", python::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("glsl", glsl::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("css", css::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("x86", x86asm::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("latex", latex::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("hpp", cpp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("make", make::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("eex", elixir::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("elixir", elixir::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("common-lisp", commonlisp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("dockerfile", dockerfile::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("yaml", yaml::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("asm", x86asm::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("meson", meson::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("commonlisp", commonlisp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("wgsl", wgsl::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("escript", erlang::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("gd", gdscript::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("scm", scheme::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("nim", nim::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("docker", dockerfile::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("cl", commonlisp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("sql", sql::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("matlab", matlab::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("htm", html::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("es", erlang::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("elisp", elisp::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("blp", blueprint::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("lua", lua::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("cue", cue::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("ts", typescript::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("java", java::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("jl", julia::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("hrl", erlang::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("kts", kotlin::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
        ("dart", dart::config as fn() -> tree_sitter_highlight::HighlightConfiguration),
    ],
};
