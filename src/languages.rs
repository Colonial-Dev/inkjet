#![allow(dead_code)]
#![allow(clippy::items_after_test_module)]
// This module is automatically generated by Inkjet.

use tree_sitter_highlight::HighlightConfiguration;

pub mod ada {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_ada() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_ada() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/ada/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = include_str!("../languages/ada/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_ada() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod asm {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_asm() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_asm() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/asm/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_asm() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod bash {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_bash() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_bash() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/bash/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/bash/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/bash/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_bash() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod bibtex {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_bibtex() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_bibtex() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/bibtex/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_bibtex() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod blueprint {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_blueprint() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_blueprint() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/blueprint/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_blueprint() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod c {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_c() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_c() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/c/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/c/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/c/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_c() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod capnp {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_capnp() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_capnp() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/capnp/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/capnp/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/capnp/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_capnp() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod clojure {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_clojure() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_clojure() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/clojure/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/clojure/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/clojure/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_clojure() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod cmake {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_cmake() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_cmake() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/cmake/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_cmake() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod c_sharp {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_c_sharp() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_c_sharp() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/c_sharp/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/c_sharp/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/c_sharp/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_c_sharp() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod commonlisp {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_commonlisp() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_commonlisp() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/commonlisp/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = include_str!("../languages/commonlisp/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_commonlisp() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod cpp {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_cpp() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_cpp() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/cpp/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/cpp/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/cpp/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_cpp() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod css {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_css() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_css() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/css/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/css/queries/injections.scm");
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_css() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod cue {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_cue() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_cue() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/cue/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/cue/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/cue/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_cue() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod dart {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_dart() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_dart() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/dart/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/dart/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/dart/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_dart() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod diff {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_diff() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_diff() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/diff/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_diff() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod dockerfile {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_dockerfile() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_dockerfile() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/dockerfile/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/dockerfile/queries/injections.scm");
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_dockerfile() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod elisp {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_elisp() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_elisp() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/elisp/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_elisp() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod elixir {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_elixir() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_elixir() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/elixir/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/elixir/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/elixir/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_elixir() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod elm {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_elm() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_elm() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/elm/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/elm/queries/injections.scm");
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_elm() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod erlang {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_erlang() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_erlang() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/erlang/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_erlang() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod fortran {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_fortran() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_fortran() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/fortran/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_fortran() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod go {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_go() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_go() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/go/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/go/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/go/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_go() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod gdscript {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_gdscript() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_gdscript() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/gdscript/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/gdscript/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/gdscript/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_gdscript() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod glsl {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_glsl() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_glsl() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/glsl/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/glsl/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/glsl/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_glsl() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod haskell {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_haskell() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_haskell() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/haskell/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/haskell/queries/injections.scm");
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_haskell() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod html {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_html() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_html() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/html/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/html/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/html/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_html() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod java {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_java() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_java() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/java/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/java/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/java/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_java() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod javascript {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_javascript() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_javascript() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/javascript/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/javascript/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/javascript/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_javascript() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod json {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_json() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_json() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/json/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = include_str!("../languages/json/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_json() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod julia {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_julia() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_julia() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/julia/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/julia/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/julia/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_julia() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod kotlin {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_kotlin() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_kotlin() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/kotlin/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/kotlin/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/kotlin/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_kotlin() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod latex {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_latex() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_latex() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/latex/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/latex/queries/injections.scm");
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_latex() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod lua {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_lua() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_lua() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/lua/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/lua/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/lua/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_lua() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod make {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_make() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_make() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/make/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/make/queries/injections.scm");
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_make() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod matlab {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_matlab() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_matlab() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/matlab/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/matlab/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/matlab/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_matlab() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod meson {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_meson() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_meson() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/meson/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/meson/queries/injections.scm");
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_meson() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod nim {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_nim() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_nim() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = "";
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_nim() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod nix {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_nix() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_nix() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/nix/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/nix/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/nix/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_nix() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod objc {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_objc() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_objc() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/objc/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/objc/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/objc/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_objc() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod ocaml {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_ocaml() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_ocaml() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/ocaml/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/ocaml/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/ocaml/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_ocaml() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod ocaml_interface {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_ocaml_interface() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_ocaml_interface() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/ocaml_interface/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/ocaml_interface/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/ocaml_interface/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_ocaml_interface() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod openscad {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_openscad() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_openscad() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/openscad/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/openscad/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/openscad/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_openscad() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod pascal {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_pascal() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_pascal() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/pascal/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/pascal/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/pascal/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_pascal() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod perl {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_perl() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_perl() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/perl/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/perl/queries/injections.scm");
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_perl() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod php {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_php() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_php() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/php/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/php/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/php/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_php() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod python {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_python() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_python() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/python/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/python/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/python/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_python() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod r {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_r() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_r() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/r/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/r/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/r/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_r() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod regex {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_regex() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_regex() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/regex/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_regex() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod ruby {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_ruby() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_ruby() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/ruby/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/ruby/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/ruby/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_ruby() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod rust {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_rust() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_rust() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/rust/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/rust/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/rust/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_rust() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod scala {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_scala() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_scala() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/scala/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/scala/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/scala/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_scala() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod scheme {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_scheme() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_scheme() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/scheme/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/scheme/queries/injections.scm");
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_scheme() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod scss {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_scss() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_scss() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/scss/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_scss() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod sql {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_sql() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_sql() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/sql/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/sql/queries/injections.scm");
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_sql() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod toml {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_toml() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_toml() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/toml/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/toml/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/toml/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_toml() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod typescript {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_typescript() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_typescript() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/typescript/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/typescript/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/typescript/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_typescript() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod x86asm {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_x86asm() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_x86asm() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/x86asm/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_x86asm() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod yaml {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_yaml() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_yaml() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/yaml/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/yaml/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/yaml/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_yaml() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod wgsl {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_wgsl() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_wgsl() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/wgsl/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = "";
    pub const LOCALS_QUERY: &str = "";

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_wgsl() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub mod zig {
    use tree_sitter::Language;
    use tree_sitter_highlight::HighlightConfiguration;

    extern "C" {
        pub fn tree_sitter_zig() -> Language;
    }

    pub fn config() -> HighlightConfiguration {
        HighlightConfiguration::new(
            unsafe { tree_sitter_zig() },
            HIGHLIGHT_QUERY,
            INJECTIONS_QUERY,
            LOCALS_QUERY,
        ).unwrap()
    }

    pub const HIGHLIGHT_QUERY: &str = include_str!("../languages/zig/queries/highlights.scm");
    pub const INJECTIONS_QUERY: &str = include_str!("../languages/zig/queries/injections.scm");
    pub const LOCALS_QUERY: &str = include_str!("../languages/zig/queries/locals.scm");

    #[cfg(test)]
    mod tests {
        #[test]
        fn grammar_loading() {
            let mut parser = tree_sitter::Parser::new();
            parser
                .set_language(unsafe { super::tree_sitter_zig() })
                .expect("Grammar should load successfully.");
        }
    }
}

pub enum Language {
    Ada,
    GenericAsm,
    Bash,
    Bibtex,
    Blueprint,
    C,
    Capnp,
    Clojure,
    Cmake,
    CSharp,
    CommonLisp,
    Cpp,
    Css,
    Cue,
    Dart,
    Diff,
    Dockerfile,
    Elisp,
    Elixir,
    Elm,
    Erlang,
    Fortran,
    Go,
    GDScript,
    Glsl,
    Haskell,
    Html,
    Java,
    Javascript,
    Json,
    Julia,
    Kotlin,
    Latex,
    Lua,
    Make,
    Matlab,
    Meson,
    Nim,
    Nix,
    Objc,
    Ocaml,
    OcamlInterface,
    OpenScad,
    Pascal,
    Perl,
    Php,
    Python,
    R,
    Regex,
    Ruby,
    Rust,
    Scala,
    Scheme,
    Scss,
    Sql,
    Toml,
    Typescript,
    X86asm,
    Yaml,
    Wgsl,
    Zig,
}

impl Language {
    pub fn from_token(token: &str) -> Option<Self> {
        match token {
            "ada" => Some(Self::Ada),
            "asm" => Some(Self::GenericAsm),
            "bash" => Some(Self::Bash),
            "bibtex" => Some(Self::Bibtex),
            "bib" => Some(Self::Bibtex),
            "blueprint" => Some(Self::Blueprint),
            "blp" => Some(Self::Blueprint),
            "c" => Some(Self::C),
            "h" => Some(Self::C),
            "capnp" => Some(Self::Capnp),
            "clojure" => Some(Self::Clojure),
            "clj" => Some(Self::Clojure),
            "cljc" => Some(Self::Clojure),
            "cmake" => Some(Self::Cmake),
            "c_sharp" => Some(Self::CSharp),
            "c#" => Some(Self::CSharp),
            "csharp" => Some(Self::CSharp),
            "cs" => Some(Self::CSharp),
            "commonlisp" => Some(Self::CommonLisp),
            "cl" => Some(Self::CommonLisp),
            "lisp" => Some(Self::CommonLisp),
            "common-lisp" => Some(Self::CommonLisp),
            "cpp" => Some(Self::Cpp),
            "c++" => Some(Self::Cpp),
            "hpp" => Some(Self::Cpp),
            "h++" => Some(Self::Cpp),
            "cc" => Some(Self::Cpp),
            "hh" => Some(Self::Cpp),
            "css" => Some(Self::Css),
            "cue" => Some(Self::Cue),
            "dart" => Some(Self::Dart),
            "diff" => Some(Self::Diff),
            "dockerfile" => Some(Self::Dockerfile),
            "docker" => Some(Self::Dockerfile),
            "elisp" => Some(Self::Elisp),
            "el" => Some(Self::Elisp),
            "emacs-lisp" => Some(Self::Elisp),
            "elixir" => Some(Self::Elixir),
            "ex" => Some(Self::Elixir),
            "eex" => Some(Self::Elixir),
            "exs" => Some(Self::Elixir),
            "leex" => Some(Self::Elixir),
            "elm" => Some(Self::Elm),
            "erlang" => Some(Self::Erlang),
            "erl" => Some(Self::Erlang),
            "hrl" => Some(Self::Erlang),
            "es" => Some(Self::Erlang),
            "escript" => Some(Self::Erlang),
            "fortran" => Some(Self::Fortran),
            "go" => Some(Self::Go),
            "golang" => Some(Self::Go),
            "gdscript" => Some(Self::GDScript),
            "gd" => Some(Self::GDScript),
            "glsl" => Some(Self::Glsl),
            "haskell" => Some(Self::Haskell),
            "hs" => Some(Self::Haskell),
            "html" => Some(Self::Html),
            "htm" => Some(Self::Html),
            "java" => Some(Self::Java),
            "javascript" => Some(Self::Javascript),
            "js" => Some(Self::Javascript),
            "json" => Some(Self::Json),
            "julia" => Some(Self::Julia),
            "jl" => Some(Self::Julia),
            "kotlin" => Some(Self::Kotlin),
            "kt" => Some(Self::Kotlin),
            "kts" => Some(Self::Kotlin),
            "latex" => Some(Self::Latex),
            "tex" => Some(Self::Latex),
            "lua" => Some(Self::Lua),
            "make" => Some(Self::Make),
            "mk" => Some(Self::Make),
            "makefile" => Some(Self::Make),
            "matlab" => Some(Self::Matlab),
            "m" => Some(Self::Matlab),
            "meson" => Some(Self::Meson),
            "nim" => Some(Self::Nim),
            "nix" => Some(Self::Nix),
            "objc" => Some(Self::Objc),
            "objective-c" => Some(Self::Objc),
            "objectivec" => Some(Self::Objc),
            "obj-c" => Some(Self::Objc),
            "ocaml" => Some(Self::Ocaml),
            "ml" => Some(Self::Ocaml),
            "ocaml_interface" => Some(Self::OcamlInterface),
            "mli" => Some(Self::OcamlInterface),
            "openscad" => Some(Self::OpenScad),
            "scad" => Some(Self::OpenScad),
            "pascal" => Some(Self::Pascal),
            "perl" => Some(Self::Perl),
            "pl" => Some(Self::Perl),
            "php" => Some(Self::Php),
            "python" => Some(Self::Python),
            "py" => Some(Self::Python),
            "r" => Some(Self::R),
            "regex" => Some(Self::Regex),
            "ruby" => Some(Self::Ruby),
            "rb" => Some(Self::Ruby),
            "rust" => Some(Self::Rust),
            "rs" => Some(Self::Rust),
            "scala" => Some(Self::Scala),
            "scheme" => Some(Self::Scheme),
            "scm" => Some(Self::Scheme),
            "ss" => Some(Self::Scheme),
            "scss" => Some(Self::Scss),
            "sql" => Some(Self::Sql),
            "toml" => Some(Self::Toml),
            "typescript" => Some(Self::Typescript),
            "ts" => Some(Self::Typescript),
            "x86asm" => Some(Self::X86asm),
            "x86" => Some(Self::X86asm),
            "yaml" => Some(Self::Yaml),
            "wgsl" => Some(Self::Wgsl),
            "zig" => Some(Self::Zig),
            _ => None,
        }
    }

    pub(crate) fn config(&self) -> HighlightConfiguration {
        match *self {
            Self::Ada => ada::config(),
            Self::GenericAsm => asm::config(),
            Self::Bash => bash::config(),
            Self::Bibtex => bibtex::config(),
            Self::Blueprint => blueprint::config(),
            Self::C => c::config(),
            Self::Capnp => capnp::config(),
            Self::Clojure => clojure::config(),
            Self::Cmake => cmake::config(),
            Self::CSharp => c_sharp::config(),
            Self::CommonLisp => commonlisp::config(),
            Self::Cpp => cpp::config(),
            Self::Css => css::config(),
            Self::Cue => cue::config(),
            Self::Dart => dart::config(),
            Self::Diff => diff::config(),
            Self::Dockerfile => dockerfile::config(),
            Self::Elisp => elisp::config(),
            Self::Elixir => elixir::config(),
            Self::Elm => elm::config(),
            Self::Erlang => erlang::config(),
            Self::Fortran => fortran::config(),
            Self::Go => go::config(),
            Self::GDScript => gdscript::config(),
            Self::Glsl => glsl::config(),
            Self::Haskell => haskell::config(),
            Self::Html => html::config(),
            Self::Java => java::config(),
            Self::Javascript => javascript::config(),
            Self::Json => json::config(),
            Self::Julia => julia::config(),
            Self::Kotlin => kotlin::config(),
            Self::Latex => latex::config(),
            Self::Lua => lua::config(),
            Self::Make => make::config(),
            Self::Matlab => matlab::config(),
            Self::Meson => meson::config(),
            Self::Nim => nim::config(),
            Self::Nix => nix::config(),
            Self::Objc => objc::config(),
            Self::Ocaml => ocaml::config(),
            Self::OcamlInterface => ocaml_interface::config(),
            Self::OpenScad => openscad::config(),
            Self::Pascal => pascal::config(),
            Self::Perl => perl::config(),
            Self::Php => php::config(),
            Self::Python => python::config(),
            Self::R => r::config(),
            Self::Regex => regex::config(),
            Self::Ruby => ruby::config(),
            Self::Rust => rust::config(),
            Self::Scala => scala::config(),
            Self::Scheme => scheme::config(),
            Self::Scss => scss::config(),
            Self::Sql => sql::config(),
            Self::Toml => toml::config(),
            Self::Typescript => typescript::config(),
            Self::X86asm => x86asm::config(),
            Self::Yaml => yaml::config(),
            Self::Wgsl => wgsl::config(),
            Self::Zig => zig::config(),
        }
    }
}
